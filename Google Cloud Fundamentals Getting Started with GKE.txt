##Google Cloud Fundamentals: Getting Started with GKE

##Objectives
In this lab, you learn how to perform the following tasks:

    * Provision a Kubernetes cluster using Kubernetes Engine.

    * Deploy and manage Docker containers using kubectl.

##Steps: Sign in to the Google Cloud Platform (GCP) Console
For each lab, you get a new GCP project and set of resources for a fixed time at no cost.

    1. Confirm that needed APIs are enabled
        Make a note of the name of your GCP project. This value is shown in the top bar of the Google Cloud Platform Console. It will be of the form qwiklabs-gcp- followed by hexadecimal numbers.

    2. In the GCP Console, on the Navigation menu (Navigation menu), click APIs & Services.Scroll down in the list of enabled APIs, and confirm that both of these APIs are enabled:
        Kubernetes Engine API
        Container Registry API

    3. Start a Kubernetes Engine cluster
        Place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE. At the Cloud Shell prompt, type this partial command:
            export MY_ZONE=
        followed by the zone that Qwiklabs assigned to you. Your complete command will look similar to this:
    
            export MY_ZONE=us-central1-a

    4. Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:

            gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2


    5. After the cluster is created, check your installed version of Kubernetes using the kubectl version command:

            kubectl version

    6. Run and deploy a container
       From your Cloud Shell prompt, launch a single instance of the nginx container. (Nginx is a popular web server.)

            kubectl create deploy nginx --image=nginx:1.17.10

    7. View the pod running the nginx container:

            kubectl get pods

    8. Expose the nginx container to the Internet:

            kubectl expose deployment nginx --port 80 --type LoadBalancer

    9. View the new service:

            kubectl get services

    10. Scale up the number of pods running on your service:

            kubectl scale deployment nginx --replicas 3

    11. Confirm that Kubernetes has updated the number of pods:

            kubectl get pods


Congratulations!
In this lab, you configured a Kubernetes cluster in Kubernetes Engine. You populated the cluster with several pods containing an application, exposed the application, and scaled the application.

***End of lab***